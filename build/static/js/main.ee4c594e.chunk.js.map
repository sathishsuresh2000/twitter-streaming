{"version":3,"sources":["Store/Messages/reducer.js","Store/rootReducer.js","config/default.js","common/socket.js","Sagas/Sagas.js","Store/index.js","Components/Search/index.js","Components/Messages/index.js","Components/Layout/index.js","serviceWorker.js","index.js"],"names":["InitialState","list","loading","newMessageCount","error","combineReducers","messages","state","action","type","count","message","newMessages","socket","socketIOClient","path","transports","reconnection","reconnectionDelay","reconnectionDelayMax","reconnectionAttempts","on","fetchMessages","fetchNewMessages","setNewMessageCount","layout","put","term","url","config","call","axios","get","params","keyword","sessionId","Cookies","emit","data","result","console","log","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","useStyles","makeStyles","theme","root","display","justifyContent","searchField","width","searchFieldWithButton","connect","dispatch","search","getNewMessages","setNewMessagesCount","props","classes","useState","searchText","setSearchText","useEffect","className","TextField","id","label","variant","color","onChange","e","searchTerm","currentTarget","value","onKeyPress","key","Badge","badgeContent","Button","onClick","fontSize","flexDirection","marginBottom","marginTop","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","empty","alignItems","padding","spacing","loader","getName","replace","Skeleton","animation","length","map","Card","CardHeader","avatar","Avatar","alt","src","user","profile_background_image_url","title","name","subheader","moment","createdTime","format","CardContent","Typography","dangerouslySetInnerHTML","__html","text","Layout","Container","maxWidth","Boolean","window","location","hostname","match","createMuiTheme","palette","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ee4c594e.chunk.js","sourcesContent":["const InitialState = {\n  list: [],\n  loading: false,\n  newMessageCount: 0,\n  error: ''\n}\nexport default (state = InitialState, action) => {\n  switch (action.type) {\n    case 'FETCH_MESSAGES_INIT':\n      return {\n        ...state, loading: true\n      }\n    case 'FETCH_MESSAGES_SUCCEEDED':\n      return {\n        ...state, list: action.messages, error: '', loading: false\n      }\n    case 'FETCH_MESSAGES_FAILED':\n      return {\n        ...state, error: action.error, list: [], loading: false\n      }\n    case 'FETCH_NEW_MESSAGES_INIT':\n      return {\n        ...state, loading: true\n      }\n    case 'FETCH_NEW_MESSAGES_SUCCEEDED':\n      return {\n        ...state, list: [...action.messages, ...state.list], error: '', loading: false, newMessageCount: 0\n      }\n    case 'FETCH_NEW_MESSAGES_FAILED':\n      return {\n        ...state, error: action.error, list: [], loading: false\n      }\n    case 'SET_NEW_MESSAGE_COUNT':\n      return {\n        ...state, newMessageCount: action.count\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux';\nimport messages from './Messages/reducer';\nexport default combineReducers({\n  messages,\n});\n","export default {\n  socketConfig: {\n    path: '/',\n    reconnection: true,\n    reconnectionDelay: 3000,\n    reconnectionDelayMax: 6000,\n    reconnectionAttempts: 'Infinity'\n  },\n  api: {\n    message: {\n      list: \"/messages\",\n      newMessages: \"/messages/new\"\n    }\n  }\n}","import socketIOClient from \"socket.io-client\";\nconst socket = socketIOClient({\n  path: '/socket',\n  transports: ['websocket'],\n  reconnection: true,\n  reconnectionDelay: 3000,\n  reconnectionDelayMax: 6000,\n  reconnectionAttempts: 'Infinity',\n});\nsocket.on('connect', () => {\n  //console.log(\"connected\");\n})\nexport default socket;","import { call, put, takeLatest } from \"redux-saga/effects\";\nimport Cookies from \"js-cookie\";\nimport axios from \"axios\";\nimport config from \"../config/default\";\nimport socket from '../common/socket';\n\nfunction* fetchMessages(action) {\n  try {\n    yield put({ type: \"FETCH_MESSAGES_INIT\"});\n    if(action.term) {\n      const url = config.api.message.list;\n      const messages = yield call(\n        axios.get,\n        url,\n        {\n          params: {\n            keyword: action.term,\n          }\n        }\n      );\n      let sessionId = Cookies.get('sessionId')\n      socket.emit('start_message_stream', {sessionId, keyword: action.term})\n      yield put({ type: \"FETCH_MESSAGES_SUCCEEDED\", messages: messages.data.result });\n    } else {\n      yield put({ type: \"FETCH_MESSAGES_SUCCEEDED\", messages: [] });\n    }\n  } catch (e) {\n    console.log(e)\n    yield put({ type: \"FETCH_MESSAGES_FAILED\", error: e });\n  }\n}\n\nfunction* fetchNewMessages(action) {\n  try {\n    yield put({ type: \"FETCH_NEW_MESSAGES_INIT\"});\n    if(action.term) {\n      const url = config.api.message.newMessages;\n      const messages = yield call(\n        axios.get,\n        url,\n        {\n          params: {\n            keyword: action.term\n          }\n        }\n      );\n      yield put({ type: \"FETCH_NEW_MESSAGES_SUCCEEDED\", messages: messages.data.result });\n    } else {\n      yield put({ type: \"FETCH_NEW_MESSAGES_SUCCEEDED\", messages: [] });\n    }\n  } catch (e) {\n    console.log(e);\n    yield put({ type: \"FETCH_NEW_MESSAGES_FAILED\", error: e });\n  }\n}\n\nfunction* setNewMessageCount(action) {\n  yield put({ type: \"SET_NEW_MESSAGE_COUNT\", count: action.count});\n}\n\nexport function* layout() {\n  yield takeLatest(\"FETCH_MESSAGES\", fetchMessages);\n  yield takeLatest(\"FETCH_NEW_MESSAGES\", fetchNewMessages);\n  yield takeLatest(\"NEW_MESSAGE_COUNT\", setNewMessageCount);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga'\n\nimport rootReducer from './rootReducer';\n\nimport {layout} from '../Sagas/Sagas'\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(sagaMiddleware)\n  ),\n );\n\nsagaMiddleware.run(layout)\n\nexport default store","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Badge from \"@material-ui/core/Badge\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport socket from \"../../common/socket\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  searchField: {\n    width: \"100%\",\n  },\n  searchFieldWithButton: {\n    width: \"80%\",\n  },\n}));\n\nfunction Search(props) {\n  const classes = useStyles();\n  const { search, getNewMessages } = props;\n  const [searchText, setSearchText] = useState(\"\");\n  const { newMessageCount, setNewMessagesCount } = props;\n\n  useEffect(() => {\n    socket.on(\"new_messages\", (data) => {\n      console.log(\"new_messages\", data);\n      setNewMessagesCount(data.result);\n    });\n  }, []);\n\n  const handleChange = (e) => {\n    let searchTerm = e.currentTarget.value;\n    setSearchText(searchTerm);\n  };\n\n  const keyPressed = (e) => {\n    if (e.key === \"Enter\") {\n      search(searchText);\n    }\n  };\n\n  const handleClick = (e) => {\n    getNewMessages(searchText);\n  };\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        id=\"outlined-secondary\"\n        label=\"Search\"\n        variant=\"outlined\"\n        color=\"primary\"\n        className={\n          newMessageCount === 0\n            ? classes.searchField\n            : classes.searchFieldWithButton\n        }\n        onChange={handleChange}\n        value={searchText}\n        onKeyPress={keyPressed}\n      />\n      {newMessageCount > 0 && (\n        <Badge color=\"secondary\" badgeContent={newMessageCount}>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleClick}>\n            load more\n            <NotificationsIcon fontSize=\"large\" />\n          </Button>\n        </Badge>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  newMessageCount: state.messages.newMessageCount,\n});\n\nconst mapDispachToProps = (dispatch) => {\n  return {\n    search: (term) => dispatch({ type: \"FETCH_MESSAGES\", term }),\n    getNewMessages: (term) => dispatch({ type: \"FETCH_NEW_MESSAGES\", term }),\n    setNewMessagesCount: (count) =>\n      dispatch({ type: \"NEW_MESSAGE_COUNT\", count }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispachToProps)(Search);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles((theme) => ({\n  messages: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    marginBottom: 25,\n  },\n  root: {\n    width: \"100%\",\n    marginTop: 25,\n  },\n  media: {\n    height: 0,\n    paddingTop: \"56.25%\", // 16:9\n  },\n  expand: {\n    transform: \"rotate(0deg)\",\n    marginLeft: \"auto\",\n    transition: theme.transitions.create(\"transform\", {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: \"rotate(180deg)\",\n  },\n  empty: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: theme.spacing(1),\n    height: 400\n  },\n  loader: {\n    display: 'flex',\n    marginTop: 25,\n    justifyContent: 'space-evenly'\n  }\n}));\n\nfunction Messages(props) {\n  const classes = useStyles();\n  const getName = (value) => {\n    let regex   = /(^|[^@\\w])@(\\w{1,15})\\b/g\n    let replace = '$1<a href=\"http://twitter.com/$2\" target=\"_blank\">@$2</a>'\n    let output = value.replace( regex, replace )\n    return output\n  }\n  const {\n    messages: { list, loading },\n  } = props;\n  return (\n    <section className={classes.messages}>\n      { loading ? (\n        <div>\n          <div className={classes.loader}>\n            <Skeleton animation=\"wave\" variant=\"circle\" width={60} height={60} />\n            <Skeleton animation=\"wave\" variant=\"rect\" width=\"95%\" height={60} />\n          </div>\n          \n          <div className={classes.loader}>\n            <Skeleton animation=\"wave\" variant=\"circle\" width={60} height={60} />\n            <Skeleton animation=\"wave\" variant=\"rect\" width=\"95%\" height={60} />\n          </div>\n\n          <div className={classes.loader}>\n            <Skeleton animation=\"wave\" variant=\"circle\" width={60} height={60} />\n            <Skeleton animation=\"wave\" variant=\"rect\" width=\"95%\" height={60} />\n          </div>\n\n          <div className={classes.loader}>\n            <Skeleton animation=\"wave\" variant=\"circle\" width={60} height={60} />\n            <Skeleton animation=\"wave\" variant=\"rect\" width=\"95%\" height={60} />\n          </div>\n\n          <div className={classes.loader}>\n            <Skeleton animation=\"wave\" variant=\"circle\" width={60} height={60} />\n            <Skeleton animation=\"wave\" variant=\"rect\" width=\"95%\" height={60} />\n          </div>\n        </div>\n      ) : list.length ? (\n        list.map((value, key) => {\n          return (\n            <Card className={classes.root} key={key}>\n            <CardHeader\n              avatar={\n                <Avatar alt=\"Remy Sharp\" src={value.user.profile_background_image_url} />\n              }\n              title={value.user.name}\n              subheader={moment(value.createdTime).format('MMMM Do YYYY, h:mm:ss a')}\n            />\n            <CardContent>\n              <Typography color=\"textSecondary\">\n                <span dangerouslySetInnerHTML={{__html: getName(value.text)}}></span>\n              </Typography>\n            </CardContent>\n          </Card>\n          )})\n      ) : (\n        <div className={classes.empty}>\n          <Typography variant=\"h6\" color=\"textSecondary\" >\n            No message Found\n          </Typography>\n        </div>\n      )}\n      \n    </section>\n  );\n}\n\nconst mapStateToProps = (state) => state;\n\nexport default connect(mapStateToProps, null)(Messages);\n","import React from 'react';\nimport Search from '../Search'\nimport Messages from '../Messages'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: 25\n  }\n}));\n\nfunction Layout() {\n  const classes = useStyles();\n  return (\n    <Container maxWidth=\"md\" className={classes.root}>\n      <Search />\n      <Messages />\n    </Container>\n  );\n}\n \nexport default Layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux'\n\nimport store from './Store'\n\nimport './index.css';\nimport Layout from './Components/Layout';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme, CssBaseline } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Provider store={store}>\n        <Layout />\n      </Provider>\n    </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}